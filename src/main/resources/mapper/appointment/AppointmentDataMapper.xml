<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.scenic.mapper.appointment.AppointmentDataMapper">

    <!-- 获取入园预约数据（个人 + 团队预约聚合） -->
    <select id="getEnterReservationData" resultType="java.util.Map">
        <!-- 当预约功能都关闭时，返回当月所有日期的默认数据 -->
        <if test="individualReserveStatus != 1 and teamReserveStatus != 1">
            SELECT 
                dates.date AS reserve_date,
                '不开放' AS reserve_status,
                0 AS booked_count,
                #{dailyLimit} AS total_limit,
                FALSE AS is_open
            FROM (
                SELECT DATE_ADD(#{yearMonth}, INTERVAL (a.a + (10 * b.a)) DAY) AS date
                FROM (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 
                      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 
                      UNION ALL SELECT 8 UNION ALL SELECT 9) AS a
                CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 
                            UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 
                            UNION ALL SELECT 8 UNION ALL SELECT 9) AS b
                WHERE DATE_ADD(#{yearMonth}, INTERVAL (a.a + (10 * b.a)) DAY) >= #{yearMonth}
                AND DATE_ADD(#{yearMonth}, INTERVAL (a.a + (10 * b.a)) DAY) &lt; DATE_ADD(#{yearMonth}, INTERVAL 1 MONTH)
            ) AS dates
            LEFT JOIN park_open_time_config p ON dates.date = p.config_date
            ORDER BY dates.date
        </if>
        
        <!-- 当预约功能开启时，返回当月所有日期的数据（包括有预约和无预约的日期） -->
        <if test="individualReserveStatus == 1 or teamReserveStatus == 1">
            SELECT 
                dates.date AS reserve_date,
                CASE 
                    WHEN p.is_closed = 1 THEN '不开放'
                    WHEN COALESCE(booking.booked_count, 0) >= #{dailyLimit} THEN '已满'
                    ELSE CONCAT('已预约', COALESCE(booking.booked_count, 0), '/', #{dailyLimit})
                END AS reserve_status,
                COALESCE(booking.booked_count, 0) AS booked_count,
                #{dailyLimit} AS total_limit,
                (p.is_closed = 0 AND p.day_type = 0) AS is_open
            FROM (
                SELECT DATE_ADD(#{yearMonth}, INTERVAL (a.a + (10 * b.a)) DAY) AS date
                FROM (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 
                      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 
                      UNION ALL SELECT 8 UNION ALL SELECT 9) AS a
                CROSS JOIN (SELECT 0 AS a UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 
                            UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 
                            UNION ALL SELECT 8 UNION ALL SELECT 9) AS b
                WHERE DATE_ADD(#{yearMonth}, INTERVAL (a.a + (10 * b.a)) DAY) >= #{yearMonth}
                AND DATE_ADD(#{yearMonth}, INTERVAL (a.a + (10 * b.a)) DAY) &lt; DATE_ADD(#{yearMonth}, INTERVAL 1 MONTH)
            ) AS dates
            LEFT JOIN park_open_time_config p ON dates.date = p.config_date
            LEFT JOIN (
                <!-- 聚合个人预约和团队预约数据 -->
                <if test="individualReserveStatus == 1">
                    SELECT
                        DATE(r.visit_date) AS reserve_date,
                        SUM(r.total_count) AS booked_count
                    FROM
                        individual_reservation r
                    WHERE
                        r.deleted = 0  -- 排除逻辑删除记录
                        AND r.status NOT IN (1, 11)  -- 排除已取消、已过期记录
                        -- 筛选指定年月的数据
                        AND YEAR(r.visit_date) = #{year}
                        AND MONTH(r.visit_date) = #{month}
                    GROUP BY
                        DATE(r.visit_date)
                </if>
                
                <if test="individualReserveStatus == 1 and teamReserveStatus == 1">
                    UNION ALL
                </if>
                
                <if test="teamReserveStatus == 1">
                    SELECT
                        DATE(t.appointment_date) AS reserve_date,
                        SUM(t.team_size) AS booked_count
                    FROM
                        team_appointment t
                    WHERE
                        t.status != 0  -- 排除已取消记录
                        -- 筛选指定年月的数据
                        AND YEAR(t.appointment_date) = #{year}
                        AND MONTH(t.appointment_date) = #{month}
                    GROUP BY
                        DATE(t.appointment_date)
                </if>
            ) AS booking ON dates.date = booking.reserve_date
            ORDER BY dates.date
        </if>
    </select>
    
    <!-- 获取活动预约数据 -->
    <select id="getActivityReservationData" resultType="java.util.Map">
        <!-- 步骤1：仅统计main_config中开放的活动预约 -->
        SELECT
            DATE(a.registration_time) AS reserve_date,  -- 活动预约日期
            a.activity_title AS activity_name,          -- 活动名称
            -- 假设活动表（activity）存储活动人数上限，通过子查询获取
            (SELECT team_limit FROM activity WHERE id = a.activity_id) AS activity_limit,
            COUNT(a.id) AS booked_count,
            CASE 
                WHEN p.is_closed = 1 THEN '不开放'  -- 日期闭园则不开放
                WHEN COUNT(a.id) >= (SELECT CAST(team_limit AS UNSIGNED) FROM activity WHERE id = a.activity_id) THEN '已满'  -- 对比活动上限
                ELSE CONCAT('已预约', COUNT(a.id), '/', (SELECT team_limit FROM activity WHERE id = a.activity_id))
            END AS reserve_status,
            (p.is_closed = 0 AND p.day_type = 0) AS is_open  -- 只有在开放且为工作日时才开放预约
        FROM
            activity_registration a
        LEFT JOIN park_open_time_config p ON DATE(a.registration_time) = p.config_date
        WHERE
            a.status != 0  -- 排除已取消记录
            AND #{activityReserveStatus} = 1  -- 活动预约已开放
            -- 筛选指定年月的数据
            AND YEAR(a.registration_time) = #{year}
            AND MONTH(a.registration_time) = #{month}
        GROUP BY
            DATE(a.registration_time), a.activity_title, p.is_closed, p.day_type, a.activity_id
        ORDER BY
            reserve_date, activity_name;
    </select>

</mapper>
